{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tsplit-the-te-splitter","title":"tSplit the TE-splitter","text":"<p>Extract terminal repeats from retrotransposons (LTRs) or DNA transposons (TIRs). Returns compontent segments of the element for use with transposon mapping tools.</p> <p>Optionally, <code>tsplit TIR</code> can also compose synthetic MITES from complete DNA transposons.</p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<ul> <li>Algorithm overview</li> <li>Options and usage</li> <li>Installing tSplit</li> </ul>"},{"location":"#algorithm-overview","title":"Algorithm overview","text":"<p>tSplit attempts to identify terminal repeats in transposable elements by first aligning each element to itself using <code>blastn</code> or <code>nucmer</code>, and then applying a set of tuneable heuristics to select an alignment pair most likely to represent an LTR or TIR, as follows:</p> <ol> <li>Exclude all diagonal/self-matches</li> <li>If <code>tsplit LTR</code>: Retain only alignment pairs on the same strand (tandem repeats)</li> <li>If <code>tsplit TIR</code>: Retain only alignment pairs on opposite strands (inverse repeats)</li> <li>Retain pairs for which the 5' match begins within x bases of element start      and whose 3' match ends within x bases of element end</li> <li>If multiple candidates remain select alignment pair with largest internal segment   (i.e. closest to element ends)</li> </ol>"},{"location":"#options-and-usage","title":"Options and usage","text":""},{"location":"#installing-tsplit","title":"Installing tSplit","text":"<p>Requirements:</p> <ul> <li>pymummer version &gt;= 0.10.3 with wrapper for nucmer option --diagfactor.</li> <li>MUMmer</li> <li>BLAST+ (Optional)</li> </ul> <p>Installation options:</p> <pre><code># Install from PyPi:\npip install tsplit\n\n# Clone and install latest dev version from this repository:\ngit clone https://github.com/Adamtaranto/tSplit.git &amp;&amp; cd tSplit &amp;&amp; pip install -e '.[dev]'\n</code></pre>"},{"location":"#license","title":"License","text":"<p>Software provided under MIT license.</p>"},{"location":"api-docs/tSplit_API/","title":"getTIRs Class","text":""},{"location":"api-docs/tSplit_API/#tsplit.parseAlign.getTIRs","title":"getTIRs","text":"<pre><code>getTIRs(\n    fasta_file: str,\n    flankdist: int = 10,\n    minid: float = 80,\n    minterm: int = 10,\n    minseed: int = 5,\n    diagfactor: float = 0.3,\n    mites: bool = False,\n    report: str = 'split',\n    temp: Optional[str] = None,\n    keeptemp: bool = False,\n    alignTool: str = 'nucmer',\n    verbose: bool = True,\n) -&gt; Generator[SeqRecord, None, None]\n</code></pre> <p>Align elements to self and attempt to identify TIRs.</p> <p>Processes sequences to identify Terminal Inverted Repeats (TIRs) by performing self-alignment. Can optionally construct synthetic Miniature Inverted-repeat Transposable Elements (MITEs).</p> PARAMETER DESCRIPTION <code>fasta_file</code> <p>Path to the multifasta file containing sequence records.</p> <p> TYPE: <code>str</code> </p> <code>flankdist</code> <p>Maximum distance from element start for TIR candidates, by default 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>minid</code> <p>Minimum identity between terminal repeat pairs, by default 80.</p> <p> TYPE: <code>float</code> DEFAULT: <code>80</code> </p> <code>minterm</code> <p>Minimum length for a terminal repeat to be considered, by default 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>minseed</code> <p>Minimum seed length for nucmer, by default 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>diagfactor</code> <p>Diagonal factor for nucmer, by default 0.3.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.3</code> </p> <code>mites</code> <p>Whether to attempt to construct synthetic MITEs, by default False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>report</code> <p>Reporting mode for TIRs ('split', 'external', 'internal', 'all'), by default 'split'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'split'</code> </p> <code>temp</code> <p>Path to the temporary directory, by default None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>keeptemp</code> <p>Whether to keep the temporary directory after processing, by default False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>alignTool</code> <p>Alignment tool to use ('nucmer' or 'blastn'), by default 'nucmer'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'nucmer'</code> </p> <code>verbose</code> <p>Whether to print verbose output, by default True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> YIELDS DESCRIPTION <code>SeqRecord</code> <p>Segments of the sequence based on the reporting mode: - 'split': TIRs and internal regions separately - 'external': Only TIRs - 'internal': Only internal regions - 'all': Original sequences plus all segments</p> Notes <p>When mites=True, the function will also yield synthetic MITEs constructed by joining the identified TIRs.</p>"},{"location":"api-docs/tSplit_API/#getltrs-class","title":"getLTRs Class","text":""},{"location":"api-docs/tSplit_API/#tsplit.parseAlign.getLTRs","title":"getLTRs","text":"<pre><code>getLTRs(\n    fasta_file: str,\n    flankdist: int = 10,\n    minid: float = 80,\n    minterm: int = 10,\n    minseed: int = 5,\n    diagfactor: float = 0.3,\n    report: str = 'split',\n    temp: Optional[str] = None,\n    keeptemp: bool = False,\n    alignTool: str = 'nucmer',\n    verbose: bool = True,\n) -&gt; Generator[SeqRecord, None, None]\n</code></pre> <p>Align elements to self and attempt to identify LTRs.</p> <p>Processes sequences to identify Long Terminal Repeats (LTRs) by performing self-alignment and filtering results.</p> PARAMETER DESCRIPTION <code>fasta_file</code> <p>Path to the multifasta file containing sequence records.</p> <p> TYPE: <code>str</code> </p> <code>flankdist</code> <p>Maximum distance from element start for LTR candidates, by default 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>minid</code> <p>Minimum identity between terminal repeat pairs, by default 80.</p> <p> TYPE: <code>float</code> DEFAULT: <code>80</code> </p> <code>minterm</code> <p>Minimum length for a terminal repeat to be considered, by default 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>minseed</code> <p>Minimum seed length for nucmer, by default 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>diagfactor</code> <p>Diagonal factor for nucmer, by default 0.3.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.3</code> </p> <code>report</code> <p>Reporting mode for LTRs ('split', 'external', 'internal', 'all'), by default 'split'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'split'</code> </p> <code>temp</code> <p>Path to the temporary directory, by default None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>keeptemp</code> <p>Whether to keep the temporary directory after processing, by default False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>alignTool</code> <p>Alignment tool to use ('nucmer' or 'blastn'), by default 'nucmer'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'nucmer'</code> </p> <code>verbose</code> <p>Whether to print verbose output, by default True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> YIELDS DESCRIPTION <code>SeqRecord</code> <p>Segments of the sequence based on the reporting mode: - 'split': LTRs and internal regions separately - 'external': Only LTRs - 'internal': Only internal regions - 'all': Original sequences plus all segments</p>"},{"location":"cli-docs/cli-tutorial/","title":"CLI Tutorial","text":""},{"location":"cli-docs/cli-tutorial/#overview","title":"Overview","text":"<p>The <code>tsplit</code> command is used to split transposable elements into their internal and external segments. It can be used for both long terminal repeats (LTRs) and terminal inverted repeats (TIRs).</p> <p>The command line tools use sequence alignment to identify the boundaries of the segments based on user-defined parameters.</p>"},{"location":"cli-docs/cli-tutorial/#example-usage","title":"Example usage","text":"<p>tSplit can be run in two modes: <code>tsplit LTR</code> and <code>tsplit TIR</code>, for extracting long terminal repeats or terminal inverted repeats, respectively.</p> <p>Options are the same for each.</p>"},{"location":"cli-docs/cli-tutorial/#tsplit-tir","title":"tsplit TIR","text":"<p>For each element in TIR_element.fa split into internal and external (TIR) segments.</p> <p>Split segments will be written to TIR_split_tsplit_output.fasta with suffix \"_I\" for internal or \"_TIR\" for external segments.</p> <p>TIRs must be at least 10bp in length and share 80% identity and occur within 10bp of each end of the input element.</p> <p>Additionally, synthetic MITEs will be constructed by concatenation of left and right TIRs, with internal segments excised.</p> <pre><code>tsplit TIR -i tests/data/TIR_element.fa -p TIR_split --makemites --keeptemp\n\n# Equivalet to defaults\ntsplit TIR -i tests/data/TIR_element.fa -p TIR_split --maxdist 10 --minid 80.0 --minterm 10 --method blastn --splitmode split --makemites --keeptemp\n</code></pre> <p>Output: <code>TIR_split_tsplit_output.fasta</code></p>"},{"location":"cli-docs/cli-tutorial/#tsplit-ltr","title":"tsplit LTR","text":"<p>For each element in LTR_retrotransposon.fa split into internal and external segments.</p> <p>Split segments will be written to LTR_split_tsplit_output.fasta with suffix \"_I\" for internal or \"_LTR\" for external segments.</p> <p>LTRs must be at least 10bp in length and share 80% identity and occur within 10bp of each end of the input element.</p> <pre><code>tsplit LTR -i tests/data/LTR_retrotransposon.fa -p LTR_split\n</code></pre> <p>Output: LTR_split_tsplit_output.fasta</p>"}]}